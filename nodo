# Estructura_de_Datos
Códigos realizados en clase, talleres, tareas.

public class Nodo 
{
    int value;
    Nodo next=null;
    public Nodo(){}
  public Nodo(int value)
  {
      this.value=value;
      
  }
   public int getValue()
   {
        return value;
    }

    public void setValue(int value) {
        this.value = value;
    }

    public Nodo getNext() {
        return next;
    }

    public void setNext(Nodo next) {
        this.next = next;
    }
}






import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;




public class Lista 
{
   

 public static void main(String[] args) throws IOException 
 {
  int n,k,m;
     BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
   String line =br.readLine();
   while(!line.equals("0,0,0"))
   {
     n= Integer.parseInt(line.split(" ")[0]);
     k= Integer.parseInt(line.split(" ")[1]);
     m= Integer.parseInt(line.split(" ")[2]);
        Nodo head= new Nodo();	
      int index1 = 0;
      int index2 = n+1;
        for(int i=0;i<n;i++)
        {
           addNodeEnd(new Nodo(i+1),head) ;
        }
        while(lengthList(head)>0)
        {
           index1=(index1 + k)%lengthList(head);
            index2=(index2 - m + n)%lengthList(head);
            if(index1==index2)
            {
                printAtIndex(index1);
                deleteAtIndex(index1);
            }
            else{
                 printAtIndex(index1);
                deleteAtIndex(index1);
                 printAtIndex(index2);
                deleteAtIndex(index2);
            }
        }
       
   }
 }
	 

    public static void addNodeEnd(Nodo newNode,Nodo head) // añadir nodo al final
    {
    Nodo temp =head;
    while(temp.next != null)
    temp = temp.next;
     temp.setNext(newNode);
    } 
    
    public static void  printList(Nodo head)
    {
        int conuter=0;
        Nodo temp
    }
  public static void  lenghtList(Nodo head)
 
    
}

